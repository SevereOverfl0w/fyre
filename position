#!/bin/sh
#
# wildefyr - 2016 (c) MIT
# move AND resize windows to useful positions

ARGS="$@"

usage() {
    cat >&2 << EOF
Usage: $(basename $0) [-lrvfeRh] <wid> <screen>
    -l | --left:    Make current or given window half of the screen positioned on the left.
    -r | --right:   Make current or given window half of the screen positioned on the right.
    -v | --video:   Make current or given mpv window full resolution.
    -f | --fuller:  Make current or given window fullscreen minus border gaps.
    -e | --extend:  Extend current or given window to the maximum screen height.
    -R | --restore: Restore current or given window to minW and minH values.
    -h | --help:    Show this help.
EOF

    test $# -eq 0 || exit $1
}

restore() {
    W=$minW
    H=$minH
}

extend() {
    Y=$((TGAP + SY))
    H=$eSH
}

left() {
    X=$((XGAP + SX))
    Y=$((TGAP + SY))
    W=$((eSW/2 - IGAP/2))
    H=$eSH
}

right() {
    Y=$((TGAP + SY))
    W=$((eSW/2 - IGAP/2))
    H=$eSH
    X=$((W + XGAP + IGAP))
}

full() {
    SW=$eSW
    SH=$eSH
    X=$((XGAP + SX))
    Y=$((TGAP + SY))
    W=$SW
    H=$SH
}

video() {
    W=$(resolution $PFW | cut -d\  -f 1)
    H=$(resolution $PFW | cut -d\  -f 2)
}

moveMouse() {
    . mouse

    mouseStatus=$(getMouseStatus)
    test "$mouseStatus" -eq 1 && moveMouseEnabled "$wid"
}

main() {
    . fyrerc

    test ! -z "$3" && {
        retrieveScreenValues $3
        wattr "$2" && wid="$2" || wid="$PFW"
    } || {
        wattr "$2" && wid="$2" || {
            wid="$PFW"
            intCheck $2 && retrieveScreenValues $2
        }
    }

    case "$1" in
        "-l"|"--left")    left    ;;
        "-r"|"--right")   right   ;;
        "-v"|"--video")   video   ;;
        "-f"|"--fuller")  full    ;;
        "-e"|"--extend")  extend  ;;
        "-R"|"--restore") restore ;;
    esac

    wtp $X $Y $W $H "$wid"
    test "$MOUSE" = "true" && moveMouse
}

test $# -eq 0 && usage 1

for arg in $ARGS; do
    case "$arg" in
        -q|--quiet)       QUIETFLAG=true ;;
        h|help|-h|--help) usage 0        ;;
    esac
done

test "$QUIETFLAG" = "true" && {
    main $ARGS 2>&1 > /dev/null
} || {
    main $ARGS
}
