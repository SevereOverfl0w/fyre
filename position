#!/bin/sh
#
# wildefyr - 2016 (c) MIT
# move AND resize windows to useful positions

ARGS="$@"

usage() {
    cat >&2 << EOF
Usage: $(basename $0) [option] <wid>
    res:  Restore current or given window to minW and minH values.
    ext:  Extend current or given window to the maximum screen height.
    lft:  Make current or given window half of the screen positioned on the left.
    rht:  Make current or given window half of the screen positioned on the right.
    full: Make current or given window fullscreen minus border gaps.
    vid:  Make current or given mpv window full resolution.
    help: Show this help.
EOF

    test $# -eq 0 || exit $1
}

restore() {
    W=$minW
    H=$minH
}

extend() {
    Y=$TGAP
    H=$eSH
}

left() {
    X=$XGAP
    Y=$TGAP
    W=$((eSW/2 - IGAP/2))
    H=$eSH
}

right() {
    Y=$TGAP
    W=$((eSW/2 - IGAP/2))
    H=$eSH
    X=$((W + XGAP + IGAP))
}

full() {
    SW=$eSW
    SH=$eSH
    X=$XGAP; Y=$TGAP
    W=$SW; H=$SH
}

video() {
    W=$(resolution $PFW | cut -d\  -f 1)
    H=$(resolution $PFW | cut -d\  -f 2)
}

moveMouse() {
    . mouse

    mouseStatus=$(getMouseStatus)
    test "$mouseStatus" -eq 1 && moveMouseEnabled "$wid"
}

main() {
    . fyrerc

    wattr "$2" && wid="$2" || wid="$PFW"

    case "$1" in
        "res")  restore ;;
        "ext")  extend  ;;
        "lft")  left    ;;
        "rht")  right   ;;
        "vid")  video   ;;
        "full") full    ;;
    esac

    wtp $X $Y $W $H "$wid"
    test "$MOUSE" = "true" && moveMouse
}

test $# -eq 0 && usage 1

for arg in $ARGS; do
    case "$arg" in
        -q|--quiet)       QUIETFLAG=true ;;
        h|help|-h|--help) usage 0        ;;
    esac
done

test "$QUIETFLAG" = "true" && {
    main $ARGS 2>&1 > /dev/null
} || {
    main $ARGS
}
