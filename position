#!/bin/sh
#
# wildefyr - 2016 (c) MIT
# move AND resize windows to useful positions

ARGS="$@"

usage() {
    cat >&2 << EOF
Usage: $(basename $0) [-lrvfeRh] <wid> <screen>
    -l | --left:    Make current or given window half of the screen positioned on the left.
    -r | --right:   Make current or given window half of the screen positioned on the right.
    -f | --fuller:  Make current or given window fullscreen minus border gaps.
    -e | --extend:  Extend current or given window to the maximum screen height.
    -b | --bottom:  Extend current or given window to the bottom edge of the screen.
    -s | --screen:  Position current or given window on to given screen.
    -Q | --quartar: Make current or given window quartar of the screen.
    -R | --restore: Restore current or given window to minW and minH values.
    -h | --help:    Show this help.
EOF

    test $# -eq 0 || exit $1
}

screen() {
    test $CURSX -gt $SX || test $CURSY -gt $SY && {
        X=$((CURSX - SX))
        Y=$((CURSY - SY))
    } || {
        X=$((CURSX + SX))
        Y=$((CURSY + SY))
    }
}

restore() {
    W=$minW
    H=$minH
}

extend() {
    W=$minW
    Y=$((TGAP + SY))
    H=$((eSH - (VGAP / ROWS) * BW))
}

bottom() {
    H=$((eSH - (VGAP / ROWS) * BW - Y + TGAP))
}

quartar() {
    W=$((eSW/2 - IGAP/2 - (IGAP / COLS) * BW))
    H=$((eSH/2 - VGAP/2 - (VGAP / ROWS) * BW))
}

left() {
    X=$((XGAP + SX))
    Y=$((TGAP + SY))
    W=$((eSW/2 - IGAP/2 - (IGAP / COLS) * BW))
    H=$((eSH - (VGAP / ROWS) * BW))
}

right() {
    Y=$((TGAP + SY))
    W=$((eSW/2 - IGAP/2 - (IGAP / COLS) * BW))
    H=$((eSH - (VGAP / ROWS) * BW))
    X=$((W + XGAP + IGAP + (IGAP / COLS) * BW))
}

full() {
    X=$((XGAP + SX))
    Y=$((TGAP + SY))
    W=$((eSW - (IGAP / COLS) * BW))
    H=$((eSH - (VGAP / ROWS) * BW))
}

moveMouse() {
    . mouse

    mouseStatus=$(getMouseStatus)
    test ! -z $mouseStatus && test $mouseStatus -eq 1 && moveMouseEnabled "$wid"
}

main() {
    . fyrerc

    # save current screen variables in case user retrieves a specific screen
    CURSX=$SX
    CURSY=$SY
    CURSW=$SW
    CURSH=$SH

    test ! -z "$3" && {
        retrieveScreenValues $3
        wattr "$2" && wid="$2" || wid="$PFW"
    } || {
        wattr "$2" && wid="$2" || {
            wid="$PFW"
            intCheck $2 && retrieveScreenValues $2
        }
    }

    case "$1" in
        -l|--left)    left    ;;
        -r|--right)   right   ;;
        -f|--fuller)  full    ;;
        -e|--extend)  extend  ;;
        -b|--bottom)  bottom  ;;
        -s|--screen)  screen  ;;
        -Q|--quartar) quartar ;;
        -R|--restore) restore ;;
    esac

    wtp $X $Y $W $H "$wid"
    test "$MOUSE" = "true" && moveMouse
}

test $# -eq 0 && usage 1

for arg in $ARGS; do
    case "$arg" in
        -q|--quiet)       QUIETFLAG=true ;;
        h|help|-h|--help) usage 0        ;;
    esac
done

test "$QUIETFLAG" = "true" && {
    main $ARGS 2>&1 > /dev/null
} || {
    main $ARGS
}
