#!/bin/sh
#
# wildefyr & z3bra - 2016 (c) wtfpl
# focus wrapper with fullscreen check

ARGS="$@"

usage() {
    cat >&2 << EOF
Usage: $(basename $0) [-w wid] [-nphq] <--enable|--disable>
    -w | --wid:     Focus the given window.
    -n | --next:    Focus the next window on the stack.
    -p | --prev:    Focus the previous window on the stack.
    -e | --enable:  Optional: Enable movement of the mouse.
    -d | --disable: Optional: Disable movement of the mouse.
    -q | --quiet:   Suppress all textual output.
    -h | --help:    Show this help.
EOF

    test $# -eq 0 || exit $1
}

hoverPush() {
    test -f "$HOVER" && {
        while read -r line; do
            wid=$(printf '%s\n' "$line" | cut -d\  -f 1)
            chwso -r "$wid"
        done < "$HOVER"
    }
}

focusWid() {
    wattr "$1" && wid="$1"
    focusMethod
}

focusNext() {
    wid="$(lsw | grep -v "$PFW" | sed '1 p;d')"
    test ! -z "$wid" && focusMethod
}

focusPrev() {
    wid="$(lsw | grep -v "$PFW" | sed '$ p;d')"
    test ! -z "$wid" && focusMethod
}

focusMethod() {
    test "$wid" = "$PFW" && exit 1

    # be as responsive as possible to user input
    wtf "$wid"
    chwso -r "$wid"

    # account for fullscreen file
    test -f "$FSFILE" && {
        test "$(cut -d\  -f 5 "$FSFILE")" = "$wid" && {
            setborder none "$wid"
        } || {
            test "$(cut -d\  -f 5 "$FSFILE")" = "$PFW" && {
                setborder none "$PFW"
                setborder active "$wid"
            }
        }
    } || {
        setborder inactive "$PFW"
        setborder active "$wid"
    }
}

moveMouse() {
    . mouse

    mouseStatus=$(getMouseStatus)
    test $mouseStatus -eq 1 && moveMouseEnabled "$wid"
}

main() {
    . fyrerc

    # automatically focus the window underneath the cursor
    test $# -eq 0 && {
        wid=$(underneath)
        test ! -z "$wid" && focusMethod
    } || {
        case "$1" in
            "-w"|"--wid")  focusWid "$2" ;;
            "-n"|"--next") focusNext     ;;
            "-p"|"--prev") focusPrev     ;;
            *)             usage 1       ;;
        esac

        test "$MOUSE" = "true" && moveMouse
    }

    hoverPush
}

for arg in $ARGS; do
    case "$arg" in
        "-e"|"--enable")          MOUSE=true     ;;
        "-d"|"--disable")         MOUSE=false    ;;
        "-q"|"--quiet")           QUIETFLAG=true ;;
        "-h"|"--help"|"h"|"help") usage 0        ;;
    esac
done

test "$QUIETFLAG" = "true" && {
    main $ARGS 2>&1 > /dev/null
} || {
    main $ARGS
}
