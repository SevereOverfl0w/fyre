#!/bin/sh
#
# wildefyr & kekler - 2016 (c) wtfpl
# snap windows without resize

ARGS="$@"

usage() {
    cat >&2 << EOF
Usage: $(basename $0) [option] <wid>
    -u  | --up:          Snap current or given window to the top of the screen.
    -l  | --left:        Snap current or given window to the left of the screen.
    -d  | --down:        Snap current or given window to the bottom of the screen.
    -r  | --right:       Snap current or given window to the right of the screen.
    -tl | --topleft:     Snap current or given window to the top left of the screen.
    -tr | --topright:    Snap current or given window to the top right of the screen.
    -bl | --bottomleft:  Snap current or given window to the bottom left of the screen.
    -br | --bottomright: Snap current or given window to the bottom right of the screen.
    -md | --middle:      Snap current or given window to the middle of the screen.
    -h  | --help:        Show this help.
EOF

    test $# -eq 0 || exit $1
}

snapTop() {
    Y=$TGAP
}

snapLeft() {
    X=$XGAP
}

snapBottom() {
    Y=$((SH - BGAP - H))
}

snapRight() {
    X=$((SW - XGAP - W))
}

snapTopLeft() {
    X=$XGAP
    Y=$TGAP
}

snapTopRight() {
    X=$((SW - XGAP - W))
    Y=$TGAP
}

snapBottomLeft() {
    X=$XGAP
    Y=$((SH - BGAP - H))
}

snapBottomRight() {
    X=$((SW - XGAP - W))
    Y=$((SH - BGAP - H))
}

snapMiddle() {
    X=$((eSW/2 - W/2 + XGAP))
    Y=$((eSH/2 - H/2 + TGAP))
}

moveMouse() {
    . mouse

    mouseStatus=$(getMouseStatus)
    test "$mouseStatus" -eq 1 && moveMouseEnabled "$wid"
}

main() {
    . fyrerc

    wattr "$2" && wid="$2" || wid="$PFW"

    case "$1" in
        "-u"|"--up")           snapTop         ;;
        "-l"|"--left")         snapLeft        ;;
        "-d"|"--down")         snapBottom      ;;
        "-r"|"--right")        snapRight       ;;
        "-tl"|"--topleft")     snapTopLeft     ;;
        "-tr"|"--topright")    snapTopRight    ;;
        "-bl"|"--bottomleft")  snapBottomLeft  ;;
        "-br"|"--bottomright") snapBottomRight ;;
        "-md"|"--middle")      snapMiddle      ;;
        *)                     usage 1         ;;
    esac

    wtp $X $Y $W $H "$wid"
    test "$MOUSE" = "true" && moveMouse
}

test $# -eq 0 && usage 1

for arg in $ARGS; do
    case "$arg" in
        -q|--quiet)       QUIETFLAG=true ;;
        h|help|-h|--help) usage 0        ;;
    esac
done

test "$QUIETFLAG" = "true" && {
    main $ARGS 2>&1 > /dev/null
} || {
    main $ARGS
}
