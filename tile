#!/bin/sh
#
# File        : /home/wildefyr/fyre/tiling
# Maintainer  : Wildefyr | http://wildefyr.net
# Copyright   : Wildefyr | Licensed under the WTFPL license.
# Depends on  : wmutils
# Inspired by : tile by z3bra, grid by Greduan

source fyrerc
source detection

# NOTE : SED q is buggy as hell, use !d instead.
# NOTE : SED doesn't like the syntax 1,/$COLS/!d if $COLS -eq 1

usage() {
    printf '%s\n' "Usage: $(basename $0)"
    exit 1
}

ignore() {
    cat $DETECT > $WLFILETEMP
    lsw >> $WLFILETEMP
}

horizontalTile() {
    sort $WLFILETEMP | uniq -u | xargs wattr xi | sort -n | \
    awk '{print $2}' > $WLFILE

    COLS=$(cat $WLFILE | wc -l)
    W=$(((SW - (COLS - 1)*IGAP)/COLS))
    H=$SH

    for c in $(seq $COLS); do
        wtp $X $Y $W $H $(head -n $c $WLFILE | tail -1)
        X=$((X + W + IGAP))
    done
}

oneWindow() {
    sort $WLFILETEMP | uniq -u | xargs wattr xi | sort -n | \
    awk '{print $2}' > $WLFILE

    cat $MAINWID >> $WLFILE

    COLS=$(cat $WLFILE | wc -l)
    W=$(((SW - (COLS - 1)*IGAP)/COLS))
    H=$SH

    for c in $(seq $COLS); do
        wtp $X $Y $W $H $(head -n $c $WLFILE | tail -1)
        X=$((X + W + IGAP))
    done
}

mainTile() {
    sort $WLFILETEMP | uniq -u | xargs wattr xi | sort -n | \
    awk '{print $2}' > $WLFILE

    COLS=4
    W=$(((SW - (COLS - 1)*IGAP)/COLS))
    H=$SH

    COLSTEMP=$((COLS - 1))
    cat $WLFILE | sed "1,/$COLSTEMP/!d" > $WLFILETEMP

    for c in $(seq $COLS); do
        wtp $X $Y $W $H $(head -n $c $WLFILETEMP | tail -1)
        X=$((X + H + IGAP))
    done

    cat $WLFILE | sed "1d" > $WLFILETEMP

    ROWS=$(cat $WLFILETEMP | wc -l)
    H=$(((SH - (ROWS - 1)*IGAP)/ROWS))

    for c in $(seq $ROWS); do
        if [ $((ROWS % 2)) -eq 1 ]; then
            if [ $((c % 2)) -eq 1 ] && [ $c -ne 1 ]; then
                Y=$((Y + 1))
            fi
        fi
        wtp $X $Y $W $H $(head -n $c $WLFILETEMP | tail -1)
        Y=$((Y + H + VIGAP))
    done
}

sideTiling() {
    sort $WLFILETEMP | uniq -u | xargs wattr xi | sort -n | \
    awk '{print $2}' > $WLFILE

    COLS=4
    W=$(((SW - (COLS - 1)*IGAP)/COLS))
    H=$SH

    COLSTEMP=$((COLS - 1))
    cat $WLFILE | sed "1,/$COLSTEMP/!d" > $WLFILETEMP

    for c in $(seq $COLS); do
        wtp $X $Y $W $H $(head -n $c $WLFILETEMP | tail -1)
        Y=$((Y + H + IGAP))
    done

    Y=$originalY
    X=$((X + W + IGAP))
    W=$((2*W + IGAP))

    wtp $X $Y $W $H $(cat $MAINWID)
    X=$((W + X + IGAP))

    cat $WLFILE | sed "1d" > $WLFILETEMP

    ROWS=$(cat $WLFILETEMP | wc -l)
    H=$(((SH - (ROWS - 1)*VIGAP)/ROWS))
    W=$(((SW - (COLS - 1)*IGAP)/COLS))

    for c in $(seq $ROWS); do
        if [ $((ROWS % 2)) -eq 1 ]; then
            if [ $((c % 2)) -eq 1 ] && [ $c -ne 1 ]; then
                Y=$((Y + 1))
            fi
        fi
        wtp $X $Y $W $H $(head -n $c $WLFILETEMP | tail -1)
        Y=$((Y + H + VIGAP))
    done
}

quadrantTile() {
    printf '%s\n' $mpvWid >> $WLFILETEMP

    sort $WLFILETEMP | uniq -u | xargs wattr xi | sort -n | \
    awk '{print $2}' > $WLFILE

    if [ $windowsOnscreen -le 3 ]; then
        cat $WLFILE | sed '1q' > $WLFILETEMP
        EXTRA=$IGAP
    else
        cat $WLFILE | sed '2q' > $WLFILETEMP
    fi

    COLS=$(cat $WLFILETEMP | wc -l)
    W=$(((SW - IGAP)/(COLS*2) - IGAP/COLS + EXTRA))
    H=$SH

    for c in $(seq $COLS); do
        wtp $X $Y $W $H $(head -n $c $WLFILETEMP | tail -1)
        X=$((X + W + IGAP))
    done

    if [ $windowsOnscreen -le 3 ]; then
        cat $WLFILE | sed '1d' > $WLFILETEMP
    else
        cat $WLFILE | sed '1,2d' > $WLFILETEMP
    fi

    COLS=$(cat $WLFILETEMP | wc -l)
    if [ $COLS -eq 1 ]; then EXTRA=$((IGAP)); else EXTRA=0; fi
    # Y=$(((SH + VIGAP)/2 + TGAP + 2*BW))
    W=$(((SW - IGAP)/(COLS*2) - IGAP/COLS + EXTRA))
    H=$(((SH - VIGAP)/2 - BW*2))

    for c in $(seq $COLS); do
        if [ $((ROWS % 2)) -eq 1 ]; then
            if [ $((c % 2)) -eq 1 ] && [ $c -ne 1 ]; then
                X=$((X + 1))
            fi
        fi
        wtp $X $Y $W $H $(head -n $c $WLFILETEMP | tail -1)
        X=$((X + W + IGAP))
    done

    # Make these perfect for 16:9 viewing at top left
    # TODO: Make this scale based on the video's resolution
    X=$(((SW - IGAP)/2 + IGAP + XGAP))
    Y=$((Y + H + BW))
    W=$(((SW - IGAP)/2))
    H=$(((SH - VIGAP)/2 + BW))

    wtp $X $Y $W $H $mpvWid
}

main() {
    # Calculate usable screen size (without borders and gaps)
    SW=$((SW - 2*XGAP - BW))
    SH=$((SH - TGAP - BGAP - BW))

    ignore

    if [ -e $MAINWID ]; then
        if [ $windowsOnscreen -eq 0 ]; then
            position full $(cat $MAINWID)
        elif [ $windowsOnscreen -eq 1 ]; then
            oneWindow
        else
            sideTiling
        fi
    elif [ ! -z $mpvWid ]; then
        if [ $windowsOnscreen -eq 1 ]; then
            position full $mpvWid
        else
            quadrantTile
        fi
    else
        if [ $windowsOnscreen -eq 1 ]; then
            position full
        else
            horizontalTile
        fi
    fi
    
    rm $MAINWID 3>&1 > /dev/null
}

main
