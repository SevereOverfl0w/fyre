#!/bin/sh
#
# wildefyr - 2016 (c) MIT
# sane resize in a direction

ARGS="$@"

usage() {
    cat >&2 << EOF
Usage: $(basename $0) <direction> <wid> <screen>
    -gr | --growright:  Grow current or given window right
    -gd | --growdown:   Grow current or given window down.
    -sl | --shrinkleft: Shrink current or given window left.
    -su | --shrinkup:   Shrink current or given window up.
    -h  | --help:       Show this help.
EOF

    test $# -eq 0 || exit $1
}

growDown() {
    test $H -lt $((minH - BW)) && {
        H=$minH
    } || {
        H=$((H + minH + VGAP + (VGAP / 4) * BW))
        test $((Y + H - minH - BGAP)) -gt $eSH && {
            Y=$((Y - minH - VGAP - (VGAP / 4) * BW))
        }
        test $H -gt $eSH && {
            Y=$TGAP
            H=$((eSH - (VGAP / 4) * BW))
        }
    }
}

growRight() {
    test $W -lt $minW && {
        W=$minW
    } || {
        W=$((W + minW + IGAP + (IGAP / 4) * BW))
        test $((X + W - minW - XGAP)) -gt $eSW && {
            X=$((X - minW - IGAP - (IGAP / 4) * BW))
        }
        test $W -gt $eSW && {
            X=$XGAP
            H=$((eSW - (IGAP / 4) * BW))
        }
    }
}

shrinkUp() {
    test $H -le $minH && {
        test $H -lt 20 && exit 0
        H=$((H/2 - VGAP/2))
    } || {
        H=$((H - minH - VGAP - (VGAP / 4) * BW))
    }
}

shrinkLeft() {
    test $W -le $minW && {
        test $W -lt 20 && exit 0
        W=$((W/2 - VGAP/2))
    } || {
        W=$((W - minW - IGAP - (IGAP / 4) * BW))
    }
}

moveMouse() {
    . mouse

    mouseStatus=$(getMouseStatus)
    test ! -z $mouseStatus && test $mouseStatus -eq 1 && moveMouseEnabled "$wid"
}

main() {
    . fyrerc

    test ! -z "$3" && {
        retrieveScreenValues "$3"
    } || {
        test ! -z "$2" || {
            retrieveScreenValues "$2"
            wid="$PFW"
        }
    }

    wattr "$2" && wid="$2"

    case "$1" in
        "-gd"|"--growdown")   growDown   ;;
        "-su"|"--shrinkup")   shrinkUp   ;;
        "-gr"|"--growright")  growRight  ;;
        "-sl"|"--shrinkleft") shrinkLeft ;;
        *)                    usage 1    ;;
    esac

    wtp $X $Y $W $H "$wid"
    test "$MOUSE" = "true" && moveMouse
}

test $# -eq 0 && usage 1

for arg in $ARGS; do
    case "$arg" in
        -q|--quiet)       QUIETFLAG=true ;;
        h|help|-h|--help) usage 0        ;;
    esac
done

test "$QUIETFLAG" = "true" && {
    main $ARGS 2>&1 > /dev/null
} || {
    main $ARGS
}
